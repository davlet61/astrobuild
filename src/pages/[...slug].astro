---
import Layout from '@/layouts/Page.astro';
import BlogPost from '@/components/Astro/BlogPost.astro';
import { getCollection } from 'astro:content';
import type { SeoProps } from '@/components/Astro/BaseHead.astro';
import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from 'astro';

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
type Props = InferGetStaticPropsType<typeof getStaticPaths>;

export const getStaticPaths = (async () => {
  const posts = await getCollection('posts');
  const pages = await getCollection('pages');
  const allContents = [...posts, ...pages];
  const allSlugs = allContents.map((p) => p.slug);

  return allContents
    .filter((c) => c.slug !== 'home')
    .map((c) => ({ params: { slug: c.slug }, props: { page: c, allSlugs } }));
}) satisfies GetStaticPaths;

const { slug } = Astro.params as Params;
const { page, allSlugs } = Astro.props;

if (!allSlugs.includes(slug) || !page) {
  return Astro.redirect('/404');
}

const redirect = page.data.redirect;
const shouldRedirect = redirect && redirect.discriminant !== 'none';
if (shouldRedirect) {
  return Astro.redirect(`/${redirect.value.redirectTo}`, redirect.value.statusCode);
}

const seo: SeoProps = {
  title: page.data.title,
  metaDescription: page.data.metaDescription || '',
  keywords: page.data.seoKeywords || '',
  image: page.data.featuredMedia?.discriminant === 'image' ? page.data.featuredMedia?.value.asset ?? '' : '',
};
---

<Layout seo={seo}>
  <BlogPost post={page} />
</Layout>
