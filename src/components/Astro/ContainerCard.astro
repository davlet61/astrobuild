---
import { parse } from 'node-html-parser/dist';

interface Props {
  content: string;
}

const { content } = Astro.props;

function parseContainerContent(htmlContent: string) {
  const root = parse(htmlContent);
  const title = root.querySelector('h3')?.textContent?.trim() || '';
  const img = root.querySelector('img');
  // console.log(img?.toString());
  // const imageSrc = img?.getAttribute('src') || '';
  // const imageAlt = img?.getAttribute('alt') || '';
  const textNodes = root.querySelectorAll('p');
  const text = textNodes
    .map((node) => node.textContent)
    .join(' ')
    .trim();

  return { title, text, img };
}

const { title, text, img } = parseContainerContent(content);
const cardId = crypto.randomUUID();
---

<div class="card-container h-[28rem]">
  <!-- Fixed height container -->
  <button
    class="card group w-full h-full flex flex-col text-left"
    data-dialog-trigger
    data-card-id={cardId}
    aria-expanded="false"
    aria-controls={`dialog-${cardId}`}
  >
    <div class="w-full h-[60%] overflow-hidden" transition:name={`card-image-${cardId}`}>
      {img && <Fragment set:html={img.toString()} />}
      <!-- {
        image && (
          <img
            src={image}
            alt={imageAlt}
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
          />
        )
      } -->
    </div>
    <div class="flex-1 p-6 overflow-hidden" transition:name={`card-content-${cardId}`}>
      <h2 class="text-xl font-semibold line-clamp-2 mb-2">{title}</h2>
      <!-- <p class="text-gray-600 dark:text-gray-300 line-clamp-3 text-sm">{text}</p> -->
    </div>
  </button>

  <dialog
    id={`dialog-${cardId}`}
    class="backdrop:bg-black/50 p-0 w-full max-w-3xl rounded-lg"
    transition:name={`dialog-${cardId}`}
  >
    <div class="bg-white dark:bg-gray-800 overflow-hidden">
      <div class="relative w-full aspect-video" transition:name={`card-image-${cardId}`}>
        <!-- {image && <img src={image} alt={imageAlt} class="w-full h-full object-cover" />} -->
        {img && <Fragment set:html={img.toString()} />}
      </div>
      <div class="p-6" transition:name={`card-content-${cardId}`}>
        <div class="flex justify-between items-start mb-4">
          <h2 class="text-2xl font-bold">{title}</h2>
          <button
            class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200"
            data-dialog-close
            aria-label="Close dialog"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        <div class="prose dark:prose-invert max-w-none" transition:animate="slide">
          <p>{text}</p>
        </div>
      </div>
    </div>
  </dialog>
</div>

<style>
  .card {
    @apply bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden 
           transition-all duration-300 ease-in-out hover:shadow-lg hover:scale-[1.02];
  }

  dialog {
    @apply fixed top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 m-0;
    view-transition-name: var(--dialog-transition-name);
  }

  dialog::backdrop {
    @apply backdrop-blur-sm;
    animation: backdrop-fade 0.3s ease-out;
  }

  @keyframes backdrop-fade {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  function initializeDialogs() {
    document.querySelectorAll('[data-dialog-trigger]').forEach((trigger) => {
      const cardId = trigger.getAttribute('data-card-id');
      const dialog = document.getElementById(`dialog-${cardId}`) as HTMLDialogElement;
      const closeButton = dialog.querySelector('[data-dialog-close]');

      dialog.style.setProperty('--dialog-transition-name', `dialog-${cardId}`);

      trigger.addEventListener('click', () => {
        if (document.startViewTransition) {
          document.startViewTransition(() => {
            dialog.showModal();
            trigger.setAttribute('aria-expanded', 'true');
            document.body.style.overflow = 'hidden';
          });
        } else {
          dialog.showModal();
          trigger.setAttribute('aria-expanded', 'true');
          document.body.style.overflow = 'hidden';
        }
      });

      const closeDialog = () => {
        if (document.startViewTransition) {
          document.startViewTransition(() => {
            dialog.close();
            trigger.setAttribute('aria-expanded', 'false');
            document.body.style.overflow = '';
          });
        } else {
          dialog.close();
          trigger.setAttribute('aria-expanded', 'false');
          document.body.style.overflow = '';
        }
      };

      closeButton?.addEventListener('click', closeDialog);

      dialog.addEventListener('click', (e) => {
        if (e.target === dialog) {
          closeDialog();
        }
      });

      dialog.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeDialog();
        }
      });
    });
  }

  // Initialize on page load
  initializeDialogs();

  // Initialize when content updates
  document.addEventListener('astro:page-load', initializeDialogs);
</script>
